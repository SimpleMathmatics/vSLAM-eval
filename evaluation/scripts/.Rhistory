return(NA)
}
# subgroup limax lower 100
for (i in 1:corr_list$n_target){
col = paste0("Zeitpunkt_", i)
x = corr_list$df_1[limax_below_100, col]
y = corr_list$df_2[limax_below_100, col]
test_res = cor.test(x = x, y = y, method = "spearman")
p_value = test_res$p.value
cor_value = test_res$estimate[1]
corrs = c(corrs, cor_value)
p_vals = c(p_vals, p_value)
}
# limax greater 100
for (i in 1:corr_list$n_target){
col = paste0("Zeitpunkt_", i)
x = corr_list$df_1[!limax_below_100, col]
y = corr_list$df_2[!limax_below_100, col]
test_res = cor.test(x = x, y = y, method = "spearman")
p_value = test_res$p.value
cor_value = test_res$estimate[1]
corrs = c(corrs, cor_value)
p_vals = c(p_vals, p_value)
}
names = c(names, paste0(paste0("limax_below_100_",name_1, "_",name_2), 1:corr_list$n_target))
names = c(names, paste0(paste0("limax_greater_100_",name_1, "_",name_2), 1:corr_list$n_target))
df_out = data.frame("Value" = names,
"correlation" = corrs,
"p.value" = p_vals)
write.xlsx(x = df_out, file = paste0("data/generated/correlations/",name_1,"_", name_2,"_spearman", ".xlsx"), sheetName = "corr", row.names = F)
}
limax_below_100 = df$Limax_1 < 100
limax_below_100 = df$Limax_1 < 100
df$Limax_1
df
library(xlsx)
library(stringr)
library(dplyr)
library(ggplot2)
library(tidyr)
# read in data
raw_filepath <- "data/raw/LIMAX.xlsx"
df = xlsx::read.xlsx(file = raw_filepath, sheetIndex = 1, header = T, startRow = 2, endRow = 23, encoding = "UTF-8", colIndex = 1:378)
# replace "/" and "?" with NA
df = apply(X=df, MARGIN=2,FUN =  function(x){sapply(x, function(i){ifelse(i=="/" | i =="/ " | i == "?", yes = NA, no = i)})})
# replace values containing a > or < with 20% higher or lower (assumption) eg <100 -> 80
replace_greater_values <- function(val){
if(grepl( ">", val, fixed = TRUE)){
number = str_split(val , ">")[[1]][2]
number = as.numeric(number)
#    number = 1.2 * number
val = as.character(number)
}else if(grepl( "<", val, fixed = TRUE)){
number = str_split(val , "<")[[1]][2]
number = as.numeric(number)
#    number = 0.8 * number
val = as.character(number)
}
return(unname(val))
}
df[,9:ncol(df)] = apply(X=df[, 9:ncol(df)], MARGIN = 2, FUN = function(col){
sapply(col, replace_greater_values)
})
# transfer all columns (except for dates and times and the first few columns) to numeric
df = as.data.frame(df)
val_cols = c()
for (column in colnames(df)[9: (ncol(df)-1)]){
uhrzeit = grepl( "Datum", column, fixed = TRUE)
datum = grepl( "Uhr", column, fixed = TRUE)
if (!(uhrzeit | datum)){
val_cols = c(val_cols, column)
eval(parse(text=paste(c("df$", column, "=as.numeric(df$",column, ")"), collapse = "")))
}
}
# get columns with missing values
missing = apply(X=df, MARGIN=2, FUN = function(x){any(is.na(x))})
missing = missing[missing]
# print columns that contain missing values
for (column in names(missing)){
print(paste("Caution: the column ", column, " contains missing values."))
}
# impute missing values by the mean
# for (column in names(missing)){
#  values = df[, column]
#  mean_oi = mean(values, na.rm=T)
#  values[is.na(values)] = mean_oi
#  df[, column] = values
#}
# save the imputed data
xlsx::write.xlsx(x = df, file = "data/generated/imputed_data.xlsx", sheetName = "imputed", row.names = F)
val_cols_non_general = val_cols[17:length(val_cols)]
means <- sapply(val_cols_non_general, function(x){
return(mean(df[, x], na.rm = T))
})
sds <- sapply(val_cols_non_general, function(x){
return(sd(df[, x], na.rm = T))
})
medians <- sapply(val_cols_non_general, function(x){
return(median(df[, x], na.rm = T))
})
df_des <- data.frame(measurement = val_cols_non_general,
mean = means,
standard.deviation = sds,
median = medians)
write.xlsx(x=df_des, file = "data/generated/deskriptive/default.xlsx", sheetName = "descriptive", row.names = F)
# do the same only with patients with limax < 100
limax_lower_100 <- ifelse(df$Limax_1 < 100, yes=TRUE, no = FALSE)
df_lower_100 = df[limax_lower_100, ]
val_cols_non_general = val_cols[17:length(val_cols)]
means <- sapply(val_cols_non_general, function(x){
return(mean(df_lower_100[, x], na.rm = T))
})
sds <- sapply(val_cols_non_general, function(x){
return(sd(df_lower_100[, x], na.rm = T))
})
medians <- sapply(val_cols_non_general, function(x){
return(median(df_lower_100[, x], na.rm = T))
})
df_des <- data.frame(measurement = val_cols_non_general,
mean = means,
standard.deviation = sds,
median = medians)
write.xlsx(x=df_des, file = "data/generated/deskriptive/limax_lower_100.xlsx", sheetName = "descriptive", row.names = F)
# do the same only with patients with limax >= 100
limax_greater_100 <- ifelse(df$Limax_1 >= 100, yes=TRUE, no = FALSE)
df_greater_100 = df[limax_greater_100, ]
val_cols_non_general = val_cols[17:length(val_cols)]
means <- sapply(val_cols_non_general, function(x){
return(mean(df_greater_100[, x], na.rm = T))
})
sds <- sapply(val_cols_non_general, function(x){
return(sd(df_greater_100[, x], na.rm = T))
})
medians <- sapply(val_cols_non_general, function(x){
return(median(df_greater_100[, x], na.rm = T))
})
df_des <- data.frame(measurement = val_cols_non_general,
mean = means,
standard.deviation = sds,
median = medians)
write.xlsx(x=df_des, file = "data/generated/deskriptive/limax_greater_100.xlsx", sheetName = "descriptive", row.names = F)
# do the same only with Sepsis
df$Septischer.Schock. = as.numeric(df$Septischer.Schock.)
df_shock = df[df$Septischer.Schock. == 1, ]
val_cols_non_general = val_cols[17:length(val_cols)]
means <- sapply(val_cols_non_general, function(x){
return(mean(df_shock[, x], na.rm = T))
})
sds <- sapply(val_cols_non_general, function(x){
return(sd(df_shock[, x], na.rm = T))
})
medians <- sapply(val_cols_non_general, function(x){
return(median(df_shock[, x], na.rm = T))
})
df_des <- data.frame(measurement = val_cols_non_general,
mean = means,
standard.deviation = sds,
median = medians)
write.xlsx(x=df_des, file = "data/generated/deskriptive/septischer_schock.xlsx", sheetName = "descriptive", row.names = F)
# do the same only with Sepsis
df$Septischer.Schock. = as.numeric(df$Septischer.Schock.)
df_sepsis = df[df$Septischer.Schock. == 0, ]
val_cols_non_general = val_cols[17:length(val_cols)]
means <- sapply(val_cols_non_general, function(x){
return(mean(df_sepsis[, x], na.rm = T))
})
sds <- sapply(val_cols_non_general, function(x){
return(sd(df_sepsis[, x], na.rm = T))
})
medians <- sapply(val_cols_non_general, function(x){
return(median(df_sepsis[, x], na.rm = T))
})
df_des <- data.frame(measurement = val_cols_non_general,
mean = means,
standard.deviation = sds,
median = medians)
write.xlsx(x=df_des, file = "data/generated/deskriptive/sepsis.xlsx", sheetName = "descriptive", row.names = F)
create_measur_df <- function(df, col_base_name_pattern, general_info_index){
general_df = df[, 1:general_info_index]
value_df = df[, str_subset(colnames(df), col_base_name_pattern)]
df = cbind(general_df, value_df)
df = as.data.frame(df)
df$Septischer.Schock. = as.factor(df$Septischer.Schock.)
df$Raucher = as.factor(df$Raucher)
df$Alkohol_Anamese. = as.factor(df$Alkohol_Anamese.)
return(df)
}
create_box_plot <- function(measur_df, group_col, general_info_index, name, scale=F){
timestamps = paste("Zeitpunkt ", 1:(ncol(measur_df)-general_info_index))
colnames(measur_df)[(general_info_index+1):ncol(measur_df)] = timestamps
measut_df <- tidyr::gather_(measur_df, "Zeitpunkt", "Messwert", timestamps)
if (is.na(group_col)){
bp <- ggplot(measut_df, aes_string(x="Zeitpunkt", y="Messwert", na.rm = TRUE))
} else{
bp <- ggplot(measut_df, aes_string(x="Zeitpunkt", y="Messwert", na.rm = TRUE, fill=group_col))
}
if(scale){
bp <- bp + geom_boxplot(outlier.shape = NA, na.rm = TRUE) + scale_fill_brewer(palette="Dark2") + theme_minimal() + scale_y_continuous(limits = quantile(measut_df$Messwert, c(0.1, 0.9), na.rm = TRUE))
}else{
bp <- bp + geom_boxplot(na.rm = TRUE) + scale_fill_brewer(palette="Dark2") + theme_minimal()
}
return(bp)
}
# get all measurement names
possible_meas_names = str_subset(colnames(df) , "_1$")
possible_meas_names = gsub('.{1}$', '', possible_meas_names)
meas_names = gsub('.{1}$', '', possible_meas_names)
meas_names = meas_names[3:length(meas_names)]
possible_meas_names = paste0("^", possible_meas_names, "[0-7][.]?[0-9]?$")
possible_meas_names_pattern = possible_meas_names[3:length(possible_meas_names)]
# remove Uhrzeit
meas_names = meas_names[-23]
possible_meas_names_pattern = possible_meas_names_pattern[-23]
create_filename <- function(name_oi){
name_oi = gsub("\\.", "_", name_oi)
filename = paste0(name_oi, ".png")
}
a = df[df$Limax_1 > 100, ]
cor.test(a$Limax_1, a$CRP_1)
ls
df
df[df$Septischer.Schock. == 1]
a = df[df$Septischer.Schock. == 1,]
a$Septischer.Schock.
a = df[df$Septischer.Schock. == 0,]
a
ncol(a)
a = df[df$Septischer.Schock. == 1,]
t.test(a$pH_1, a$pH_2)
t.test(a$pH_1, a$pH_2, paired = T)
wilcox.test(a$pH_1, a$pH_2, paired = T)
wilcox.test(a$pH_1, a$pH_2)
wilcox.test(a$pH_1, a$pH_2, paired = T)
shapiro.test(a$pH_1 - a$pH_2)
t.test(a$Laktat_1 , a$Laktat_2, paired = T)
a = df[df$Septischer.Schock. == 0,]
t.test(a$Leukozyten_10hoch9Zellenpro.L_1 , a$Leukozyten_10hoch9Zellenpro.L_3, paired = T)
a = df
t.test(x = a$Limax_1[a$Septischer.Schock. == 1], a$Limax_1[a$Septischer.Schock. == 0])
t.test(x = a$Limax_1[a$Septischer.Schock. == 1], a$Limax_1[a$Septischer.Schock. == 0], var.equal = F)
t.test(x = a$Limax_1[a$Septischer.Schock. == 1], a$Limax_1[a$Septischer.Schock. == 0], var.equal = F, alternative = "less")
t.test(x = a$Limax_2[a$Septischer.Schock. == 1], a$Limax_2[a$Septischer.Schock. == 0], var.equal = F, alternative = "less")
t.test(x = a$Limax_3[a$Septischer.Schock. == 1], a$Limax_3[a$Septischer.Schock. == 0], var.equal = F, alternative = "less")
a$Limax_4[a$Septischer.Schock. == 0]
a$Limax_4[a$Septischer.Schock. == 1]
t.test(x = a$Limax_4[a$Septischer.Schock. == 1], a$Limax_4[a$Septischer.Schock. == 0], var.equal = F, alternative = "less")
cor(df$Limax_1, df$PCT_1)
cor(df$Limax_1, df$PCT_1, method = "spearman")
Sys.glob("*")
setwd("C:/Users/julia/Uni/Semester_4/vSLAM-eval/evaluation/scripts")
result_dir = "C:/Users/julia/Downloads/results"
Sys.glob("*")
Sys.glob("../*")
Sys.glob(paths = "C:/Users/julia/Downloads/results")
Sys.glob(paths = "C:/Users/julia/Downloads/results/*")
Sys.glob(paths = "C:/Users/julia/Downloads/results/*/*")
Sys.glob(paths = "C:/Users/julia/Downloads/results/*/*/*")
library("rjson")
install.packages("rjson")
library("rjson")
rjson::fromJSON(paste(readLines(paste(res_paths[1], "eval", "json", collapse = "/")))
rjson::fromJSON(paste(readLines(paste(res_paths[1], "eval", "json", collapse = "/"))))
paste(res_paths[1], "eval", "json", collapse = "/")
res_paths = Sys.glob(paths = "C:/Users/julia/Downloads/results/*/*/*")
paste(res_paths[1], "eval", "json", collapse = "/")
paste(res_paths[1], "eval", "json", sep = "/")
paste(res_paths[1], "eval", "result", sep = "/")
rjson::fromJSON(paste(readLines(paste(res_paths[1], "eval", "result", sep = "/"))))
library("rjson")
result_dir = "C:/Users/julia/Downloads/results"
res_paths = Sys.glob(paths = "C:/Users/julia/Downloads/results/*/*/*")
ev_res <- lapply(res_paths, FUN = function(path_oi){
return(rjson::fromJSON(paste(readLines(paste(path_oi, "eval", "result", sep = "/")))))
})
warnings()
ev_res[1]
pc_errors = sapply(ev_res, FUN = function(list_oi){
return(list_oi$pq_errors)
})
pc_errors
return(mean(list_oi$pq_errors))
# pointcloud
pc_errors = sapply(ev_res, FUN = function(list_oi){
return(mean(list_oi$pq_errors))
})
pc_errors
return(lsit_oi$algo)
algos = sapply(ev_res, FUN = function(list_oi){
return(lsit_oi$algo)
})
algos = sapply(ev_res, FUN = function(list_oi){
return(list_oi$algo)
})
algos
return(list_oi$seq)
sequences = sapply(ev_res, FUN = function(list_oi){
return(list_oi$seq)
})
sequences
sequences = sapply(ev_res, FUN = function(list_oi){
return(list_oi$sequence)
})
runs = sapply(ev_res, FUN = function(list_oi){
return(list_oi$run)
})
sequences
runs
pc_df <- data.frame(
"algo" = algos,
"seq" = sequences,
"run" = runs,
"pc_error" = pc_errors
)
library(ggplot2)
ggplot(data=pc_df, aes(seq, pc_errors)) + geom_boxplot(aes(fill=algo))
pc_df$pc_error
pc_df_plot <- pc_df[!is.na(pc_df$pc_error),]
ggplot(data=pc_df_plot, aes(seq, pc_errors)) + geom_boxplot(aes(fill=algo))
pc_df_plot
pc_df_plot <- pc_df[!is.na(pc_df$pc_error),]
ggplot(data=pc_df_plot, aes(seq, pc_errors)) + geom_boxplot(aes(fill=algo))
rlang::last_error()
g <- ggplot(data=pc_df_plot, aes(seq, pc_errors, fill=algo)) + geom_boxplot(aes(fill=algo))
g
g <- ggplot(data=pc_df_plot, aes(seq, pc_errors, fill=algo)) + geom_boxplot()
g
pc_df_plot$seq
pc_df_plot$pc_errors
g <- ggplot(data=pc_df_plot, aes(seq, pc_error, fill=algo)) + geom_boxplot()
g
sapply(ev_res, FUN = function(x){return(c(x$seq, x$algo)})
sapply(ev_res, FUN = function(x){return(c(x$seq, x$algo)}))
sapply(ev_res, FUN = function(x){return(c(x$seq, x$algo)}))
ev_res
pc_df
df_oi <- rbind(pc_errors_ORB, pc_errors_DSM, pc_errors_DSM)
pc_errors_ORB <- data.frame(
"algo" = "ORB",
"error" = ev_res[[88]]$pq_errors
)
pc_errors_DSM <- data.frame(
"algo" = "DSO",
"error" = ev_res[[86]]$pq_errors
)
pc_errors_DSM <- data.frame(
"algo" = "DSM",
"error" = ev_res[[82]]$pq_errors
)
df_oi <- rbind(pc_errors_ORB, pc_errors_DSM, pc_errors_DSM)
ggplot(data = df_oi, aes(error, color=algo)) + geom_density()
df_oi <- rbind(pc_errors_ORB, pc_errors_DSO, pc_errors_DSM)
ggplot(data = df_oi, aes(error, color=algo)) + geom_density()
pc_errors_ORB <- data.frame(
"algo" = "ORB",
"error" = ev_res[[88]]$pq_errors
)
pc_errors_DSM <- data.frame(
"algo" = "DSO",
"error" = ev_res[[86]]$pq_errors
)
pc_errors_DSM <- data.frame(
"algo" = "DSM",
"error" = ev_res[[82]]$pq_errors
)
df_oi <- rbind(pc_errors_ORB, pc_errors_DSO, pc_errors_DSM)
ggplot(data = df_oi, aes(error, color=algo)) + geom_density()
df_oi
df_oi <- rbind(pc_errors_ORB, pc_errors_DSO, pc_errors_DSM)
pc_errors_DSO <- data.frame(
"algo" = "DSO",
"error" = ev_res[[86]]$pq_errors
)
pc_errors_DSM <- data.frame(
"algo" = "DSM",
"error" = ev_res[[82]]$pq_errors
)
df_oi <- rbind(pc_errors_ORB, pc_errors_DSO, pc_errors_DSM)
ggplot(data = df_oi, aes(error, color=algo)) + geom_density()
ggplot(data = df_oi, aes(error, color=algo)) + geom_density(adjust=5)
ggplot(data = df_oi, aes(error, color=algo)) + geom_density()
ev_res[[1]]
get_traj_df <- function(eval_list, seq_oi, alg_oi, run_oi){
for (l in eval_list){
if ((l$algorithm == alg_oi) && (l$sequence == seq_oi) && (l$run == run_oi)){
return(data.frame(
"algo" = alg_oi,
"run" = run_oi,
"seq" = seq_oi,
"x" = l$traj_x,
"y" = l$traj_y,
"z" = l$traj_z
))
}
}
}
test_df <- get_traj_df(eval_list = ev_res, seq_oi = "MH01", alg_oi = "DSO", run_oi = "data_0")
test_df
ggpot(test_df) + geom_line(aes(x,y))
ggplot(test_df) + geom_line(aes(x,y))
ggplot(test_df) + geom_point(aes(x,y))
get_seq_tray <- function(eval_list, seq_oi, alg_oi, run_oi){
run1 <- get_traj_df(eval_list = eval_list,
seq_oi = seq_oi,
alg_oi = alg_oi,
run_oi = "data_0")
run1$run=1
run2 <- get_traj_df(eval_list = eval_list,
seq_oi = seq_oi,
alg_oi = alg_oi,
run_oi = "data_1")
run2$run=2
run3 <- get_traj_df(eval_list = eval_list,
seq_oi = seq_oi,
alg_oi = alg_oi,
run_oi = "data_2")
run3$run=3
return(
rbind(run1, run2, run3)
)
}
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "MH01", alg_oi = "DSO")
ggpot(test_df) + geom_line(aes(x,y, shape=run))
ggplot(test_df) + geom_line(aes(x,y, shape=run))
ggplot(test_df) + geom_line(aes(x,y, shape=as.factor(run)))
ggplot(test_df) + geom_point(aes(x,y, shape=as.factor(run)))
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)))
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=1)
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.3)
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "MH01", alg_oi = "DSM")
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "MH01", alg_oi = "ORB")
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.3)
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "MH01", alg_oi = "DSM")
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.3)
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "V103", alg_oi = "DSO")
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.3)
ggplot(test_df) + geom_point(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.8)
ggplot(test_df) + geom_path(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.8)
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "V102", alg_oi = "DSO")
ggplot(test_df) + geom_path(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.8)
g
test_df <- get_seq_tray(eval_list = ev_res, seq_oi = "V101", alg_oi = "DSO")
test_df
ggplot(test_df) + geom_path(aes(x,y, color=as.factor(run)), size=0.5, alpha =0.8)
get_traj_dist_df <- function(eval_list, seq_oi, alg_oi, run_oi){
for (l in eval_list){
if ((l$algorithm == alg_oi) && (l$sequence == seq_oi) && (l$run == run_oi)){
return(data.frame(
"algo" = alg_oi,
"run" = run_oi,
"seq" = seq_oi,
"time" = l$traj_timestamp,
"error" = l$traj_dist,
))
}
}
}
plot_tray_error_over_time <- function(ev_list, seq_oi, run_oi){
# orb
orb <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "ORB",
run_oi = run_oi)
dsm <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSM",
run_oi = run_oi)
dso <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSO",
run_oi = run_oi)
df_oi <- rbind(orb, dsm, dso)
g <- ggplot(df_oi) + geom_path(x = time, y = error, color=algo)
g
}
plot_tray_error_over_time(ev_list = ev_res, seq_oi = "MH01", run_oi = "data_0")
get_traj_dist_df <- function(eval_list, seq_oi, alg_oi, run_oi){
for (l in eval_list){
if ((l$algorithm == alg_oi) && (l$sequence == seq_oi) && (l$run == run_oi)){
return(data.frame(
"algo" = alg_oi,
"run" = run_oi,
"seq" = seq_oi,
"time" = l$traj_timestamp,
"error" = l$traj_dist
))
}
}
}
plot_tray_error_over_time(ev_list = ev_res, seq_oi = "MH01", run_oi = "data_0")
plot_tray_error_over_time <- function(ev_list, seq_oi, run_oi){
# orb
orb <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "ORB",
run_oi = run_oi)
dsm <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSM",
run_oi = run_oi)
dso <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSO",
run_oi = run_oi)
df_oi <- rbind(orb, dsm, dso)
print(df_oi)
g <- ggplot(df_oi) + geom_path(x = time, y = error, color=algo)
g
}
plot_tray_error_over_time(ev_list = ev_res, seq_oi = "MH01", run_oi = "data_0")
g <- ggplot(df_oi) + geom_path(aes(x = time, y = error, color=algo))
plot_tray_error_over_time <- function(ev_list, seq_oi, run_oi){
# orb
orb <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "ORB",
run_oi = run_oi)
dsm <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSM",
run_oi = run_oi)
dso <- get_traj_dist_df(eval_list = ev_list, seq_oi = seq_oi, alg_oi = "DSO",
run_oi = run_oi)
df_oi <- rbind(orb, dsm, dso)
print(df_oi)
g <- ggplot(df_oi) + geom_path(aes(x = time, y = error, color=algo))
g
}
plot_tray_error_over_time(ev_list = ev_res, seq_oi = "MH01", run_oi = "data_0")
